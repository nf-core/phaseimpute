nextflow_workflow {

    name "Test Subworkflow PREPARE_INPUT_STITCH"
    script "../main.nf"
    config "./nextflow.config"

    workflow "PREPARE_INPUT_STITCH"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/prepare_input_stitch"
    tag "prepare_input_stitch"

    tag "stitch"

    test("Prepare input stitch") {
        when {
            params {
                max_cpus   = 2
                max_memory = '2.GB'
            }
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "NA12878"],
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam.bai", checkIfExist:true),
                    ],
                    [
                        [id: "NA19401"],
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam.bai", checkIfExist:true),
                    ],
                ])
                input[1] = Channel.of([
                        [id: "1000GP", chr: "22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.legend.gz", checkIfExist:true)
                    ]).collect()
                input[2] = Channel.of([
                    [chr: "22", region: "chr22:16570000-16610000"], "chr22:16570000-16610000"
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
