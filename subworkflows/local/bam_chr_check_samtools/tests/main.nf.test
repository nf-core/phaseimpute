nextflow_workflow {

    name "Test Subworkflow BAM_CHR_CHECK_SAMTOOLS"
    script "../main.nf"

    workflow "BAM_CHR_CHECK_SAMTOOLS"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/bam_chr_check_samtools"
    tag "bam_chr_check_samtools"
    tag "subworkflows/bam_chr_rename_samtools"
    tag "bam_chr_rename_samtools"

    tag "gawk"

    test("No rename: bam chr + fasta chr") {
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                fai_file = Channel.of('chr22\t10000\t7\t60\t61', 'chrM\t10000\t7\t60\t61').collectFile(name: 'chr22M.fai', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "test_paired"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                    [
                        [id: "test_MT"],
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam_bai'], checkIfExist:true)
                    ],
                ])
                input[1] = Channel.of([[id:"GRCh37chr"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
    test("Rename: bam chr + fasta no chr") {
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                fai_file = Channel.of('22\t10000\t7\t60\t61', 'M\t10000\t7\t60\t61').collectFile(name: '22_M.fai', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "test_paired"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                    [
                        [id: "test_MT"],
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam_bai'], checkIfExist:true)
                    ],
                ])
                input[1] = Channel.of([[id:"GRCh37"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("Rename: bam no chr + fasta chr") {
        setup {
            run("BAM_CHR_RENAME_SAMTOOLS", alias: "PREPROCESS") {
                script "../../bam_chr_rename_samtools/main.nf"
                process {
                    """
                    input[0] = Channel.fromList([
                        [
                            [id: "test_paired"],
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                        ],
                        [
                            [id: "test_MT"],
                            file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam'], checkIfExist:true),
                            file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam_bai'], checkIfExist:true)
                        ],
                    ])
                    input[1] = Channel.of("nochr")
                    """
                }
            }
        }
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                fai_file = Channel.of('chr22\t10000\t7\t60\t61', 'chrM\t10000\t7\t60\t61').collectFile(name: 'chr22M.fai', newLine: true)
                input[0] = PREPROCESS.out.bam_renamed
                input[1] = Channel.of([[id:"GRCh37chr"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
    /*
    test("Error : missing renaming params") {
        config "./nextflow.config"
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "test_paired"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                    [
                        [id: "test_MT"],
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam_bai'], checkIfExist:true)
                    ],
                ])
                input[1] = Channel.of([[id:"GRCh37"],[],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/genome/genome.fasta.fai",checkIfExist:true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport.contains("Some contig names in the VCF do not match the reference genome. Please set `rename_chr` to `true` to rename the contigs.")}
            )
        }
    }
    test("Error : still difference after renaming"){
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    input[0] = Channel.fromList([
                    [
                        [id: "test_paired"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                    [
                        [id: "test_MT"],
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam_bai'], checkIfExist:true)
                    ],
                ]) // Error due to multiple contigs name in header not present in fasta file
                input[1] = Channel.of([
                    [id:"GRCh37"],
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/genome/genome.fasta",checkIfExist:true),
                    file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/genome/genome.fasta.fai",checkIfExist:true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport.contains("Even after renaming errors are still present. Please check that contigs name in vcf and fasta file are equivalent.")}
            )
        }
    }
    */
}
