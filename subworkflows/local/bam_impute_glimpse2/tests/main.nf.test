nextflow_workflow {

    name "Test Subworkflow BAM_IMPUTE_GLIMPSE2"
    script "../main.nf"

    workflow "BAM_IMPUTE_GLIMPSE2"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/bam_impute_glimpse2"
    tag "bam_impute_glimpse2"

    tag "glimpse2"
    tag "glimpse2/phase"
    tag "glimpse2/ligate"
    tag "bcftools"
    tag "bcftools/index"

    test("Impute with glimpse2") {
        when {
            params {
                max_cpus   = 2
                max_memory = '2.GB'
            }
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "NA12878"],
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam.bai", checkIfExist:true),
                    ],
                    [
                        [id: "NA19401"],
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam.bai", checkIfExist:true),
                    ],
                ])
                input[1] = Channel.of([
                        [id: "1000GP", chr: "22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz.csi", checkIfExist:true),
                    ]).collect()
                input[2] = Channel.of(
                    [[chr: "22", id: "1000GP"], "chr22:16570065-16597215", "chr22:16570065-16592216"],
                    [[chr: "22", id: "1000GP"], "chr22:16587172-16609999", "chr22:16592229-16609999"]
                )
                input[3] = Channel.of([
                    [id: "GRCh38"],
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz.fai", checkIfExist:true),
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.vcf_tbi.collect{ path(it[1]).vcf.summary }).match("Summary") }
            )
        }
    }

    test("Impute with glimpse2 mixed") {
        when {
            params {
                max_cpus   = 2
                max_memory = '2.GB'
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id: "allIndividuals"],
                    [file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam", checkIfExist:true)],
                    [file(params.pipelines_testdata_base_path + "hum_data/individuals/NA12878/NA12878.s.bam.bai", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/individuals/NA19401/NA19401.s.bam.bai", checkIfExist:true)],
                ])
                input[1] = Channel.of([
                        [id: "1000GP", chr: "22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz.csi", checkIfExist:true),
                    ]).collect()
                input[2] = Channel.of(
                    [[chr: "22", id: "1000GP"], "chr22:16570065-16597215", "chr22:16570065-16592216"],
                    [[chr: "22", id: "1000GP"], "chr22:16587172-16609999", "chr22:16592229-16609999"]
                )
                input[3] = Channel.of([
                    [id: "GRCh38"],
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz", checkIfExist:true),
                    file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38.s.fa.gz.fai", checkIfExist:true),
                ]).collect()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.vcf_tbi.collect{ path(it[1]).vcf.summary }).match("SummaryMixed") }
            )
        }
    }
}
