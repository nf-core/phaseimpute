nextflow_workflow {

    name "Test Subworkflow VCF_CHUNK_GLIMPSE"
    script "../main.nf"

    config "./nextflow.config"

    workflow "VCF_CHUNK_GLIMPSE"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/vcf_chunk_glimpse"
    tag "vcf_chunk_glimpse"

    tag "glimpse"
    tag "glimpse/chunk"
    tag "glimpse2"
    tag "glimpse2/chunk"

    test("Chunks with Map") {
        when {
            params {
                max_cpus   = 2
                max_memory = '2.GB'
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [id: "1000GP", chr: "chr22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz.csi", checkIfExist:true),
                    ],
                    [
                        [id: "1000GP", chr: "chr21"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr21/1000GP.chr21.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr21/1000GP.chr21.s.norel.vcf.gz.csi", checkIfExist:true),
                    ]
                )
                input[1] = Channel.of(
                    [
                        [chr: "chr22"],
                        file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38_22.map", checkIfExist:true)
                    ],
                    [
                        [chr: "chr21"],
                        file(params.pipelines_testdata_base_path + "hum_data/reference_genome/GRCh38_21.map", checkIfExist:true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.chunks.collect{
                    path(it[1]).readLines()
                    }).match("chunksWithMap")
                }
            )
        }
    }

    test("Chunks without Map") {
        when {
            params {
                max_cpus   = 2
                max_memory = '2.GB'
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [id: "1000GP", chr: "chr22"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr22/1000GP.chr22.s.norel.vcf.gz.csi", checkIfExist:true),
                    ],
                    [
                        [id: "1000GP", chr: "chr21"],
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr21/1000GP.chr21.s.norel.vcf.gz", checkIfExist:true),
                        file(params.pipelines_testdata_base_path + "hum_data/panel/chr21/1000GP.chr21.s.norel.vcf.gz.csi", checkIfExist:true),
                    ]
                )
                input[1] = Channel.of(
                    [[chr: "chr22"], []],
                    [[chr: "chr21"], []]
                )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.chunks.collect{
                    path(it[1]).readLines()
                    }).match("chunksWithoutMap")
                }
            )
        }
    }
}
