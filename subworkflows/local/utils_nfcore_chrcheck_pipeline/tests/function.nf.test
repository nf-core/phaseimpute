nextflow_function {

    name "Test function chrcheck"
    script "../main.nf"
    function "diffChr"
    tag "function"
    tag "diffChr"

    test("All ref in target") {
        when {
            function {
                """
                input[0] = ["chr1", "chr2", "chr3"]
                input[1] = ["chr2", "chr1"]
                input[2] = "123.vcf"
                """
            }
        }
        then {
            assert function.success
            assert function.result == [[], 'nochr']
        }
    }

    test("ref no chr & target chr") {
        when {
            function {
                """
                input[0] = ["chr1", "chr2", "chr3"]
                input[1] = ["2", "1"]
                input[2] = "chr123.vcf"
                """
            }
        }
        then {
            assert function.success
            assert snapshot(function.result).match()
        }
    }

    test("ref chr & target no chr") {
        when {
            function {
                """
                input[0] = ["1", "2", "3"]
                input[1] = ["chr2", "chr1"]
                input[2] = "123.vcf"
                """
            }
        }
        then {
            assert function.success
            assert snapshot(function.result).match()
        }
    }

    test("ref chr & target chr but missing contig") {
        when {
            function {
                """
                input[0] = ["1", "2", "3"]
                input[1] = ["chr2", "chr1", "chr4"]
                input[2] = "123.vcf"
                """
            }
        }
        then {
            assert function.failed
            assert snapshot(function.stdout).match()
        }
    }

    test("Mix file with and withouth chr") {
        when {
            function {
                """
                input[0] = ["chr1", "chr2", "chr3", "GL000207.1", "GL000226.1", "GL000229.1", "GL000231.1" ]
                input[1] = ["2", "1", "GL000207.1", "GL000226.1", "GL000229.1", "GL000231.1" ]
                input[2] = "123.vcf"
                """
            }
        }
        then {
            assert function.success
            assert snapshot(function.result).match()
        }
    }
}
