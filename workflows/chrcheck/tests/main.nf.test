nextflow_workflow {

    name "Test Subworkflow CHR_CHECKS"
    script "../main.nf"

    workflow "CHR_CHECK"

    tag "workflows"
    tag "workflows_local"
    tag "workflows/chr_check"
    tag "chr_check"

    tag "bcftools"
    tag "bcftools/annotate"
    tag "bcftools/index"
    tag "gawk"
    /*
    test("Rename: VCF BAM chr + fasta no chr") {
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                fai_file = Channel.of('22\t10000\t7\t60\t61', '21\t10000\t7\t60\t61', 'M\t10000\t7\t60\t61').collectFile(name: 'chr21_22_M.fai', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "VCF_chr22"],
                        file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz'],checkIfExist:true),
                        file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz_tbi'],checkIfExist:true)
                    ],
                    [
                        [id: "VCF_chr21"],
                        file(params.test_data['homo_sapiens']['illumina']['simulated_sv'],checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['simulated_sv_tbi'],checkIfExist:true)
                    ],
                    [
                        [id: "BAM_chr22"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                    [
                        [id: "BAM_chrM"],
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam_bai'], checkIfExist:true)
                    ]
                ])
                input[1] = Channel.of([[id:"GRCh37"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.output.collect{
                    if (it[1].endsWith("vcf.gz")) {
                        path(it[1]).linesGzip.findAll { it.startsWith ("##contig=<ID") }
                    } else {
                        bam(it[1]).getHeader().findAll { it.startsWith ("@SQ") }
                    }
                    }).match("headerwithchr")
                }
            )
        }
    }

    test("Rename: VCF no chr + fasta chr") {
        config "./nextflow_rename.config"
        setup {
            run("BAM_CHR_RENAME_SAMTOOLS", alias: "PREPROCESS") {
                script "../../../subworkflows/local/bam_chr_rename_samtools/main.nf"
                process {
                    """
                    input[0] = Channel.fromList([
                        [
                            [id: "BAM_21"],
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true),
                            "nochr"
                        ],
                        [
                            [id: "BAM_M"],
                            file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam'], checkIfExist:true),
                            file(params.test_data['homo_sapiens']['illumina']['test_illumina_mt_bam_bai'], checkIfExist:true),
                            "nochr"
                        ],
                    ])
                    """
                }
            }
        }
        when {
            workflow {
                """
                fai_file = Channel.of([
                    "chr", "chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10",
                    "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", "chr20",
                    "chr21", "chr22", "chrX", "chrY", "chrMT", "chrM",
                    "GL000207.1", "GL000226.1", "GL000229.1", "GL000231.1", "GL000210.1", "GL000239.1", "GL000235.1",
                    "GL000201.1", "GL000247.1", "GL000245.1", "GL000197.1", "GL000203.1", "GL000246.1", "GL000249.1",
                    "GL000196.1", "GL000248.1", "GL000244.1", "GL000238.1", "GL000202.1", "GL000234.1", "GL000232.1",
                    "GL000206.1", "GL000240.1", "GL000236.1", "GL000241.1", "GL000243.1", "GL000242.1", "GL000230.1",
                    "GL000237.1", "GL000233.1", "GL000204.1", "GL000198.1", "GL000208.1", "GL000191.1", "GL000227.1",
                    "GL000228.1", "GL000214.1", "GL000221.1", "GL000209.1", "GL000218.1", "GL000220.1", "GL000213.1",
                    "GL000211.1", "GL000199.1", "GL000217.1", "GL000216.1", "GL000215.1", "GL000205.1", "GL000219.1",
                    "GL000224.1", "GL000223.1", "GL000195.1", "GL000212.1", "GL000222.1", "GL000200.1", "GL000193.1",
                    "GL000194.1", "GL000225.1", "GL000192.1", "NC_007605", "hs37d5"
                ]).collectFile(name: 'genome.fai', newLine: true)
                input[0] = PREPROCESS.out.bam_renamed.mix(
                    Channel.fromList([
                        [
                            [id: "VCF_AllNoChr"],
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz",checkIfExist:true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz.tbi",checkIfExist:true)
                        ],
                    ])
                )
                input[1] = Channel.of([[id:"GRCh37"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.output.collect{
                    if (it[1].endsWith("vcf.gz")) {
                        path(it[1]).linesGzip.findAll { it.startsWith ("##contig=<ID") }
                    } else {
                        bam(it[1]).getHeader().findAll { it.startsWith ("@SQ") }
                    }
                    }).match("headerwithchr")
                }
            )
        }
    }

    test("Error : missing renaming VCF") {
        config "./nextflow.config"
        when {
            workflow {
                """
                fai_file = Channel.of('chr22', '21').collectFile(name: 'chr21_22_M.fai', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "BAM_chr22"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                    [
                        [id: "VCF_chr21"],
                        file(params.test_data['homo_sapiens']['illumina']['simulated_sv'],checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['simulated_sv_tbi'],checkIfExist:true)
                    ],
                ])
                input[1] = Channel.of([[id:"GRCh37"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport
                    .contains("Contig names: [chr21] in the VCF: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz are not present in the reference genome. Please set `rename_chr` to `true` to rename the contigs.")
                }
            )
        }
    }

    test("Error : missing renaming BAM") {
        config "./nextflow.config"
        when {
            workflow {
                """
                fai_file = Channel.of('22', 'chr21').collectFile(name: 'chr21_22_M.fai', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "BAM_chr22"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                    [
                        [id: "VCF_chr21"],
                        file(params.test_data['homo_sapiens']['illumina']['simulated_sv'],checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['simulated_sv_tbi'],checkIfExist:true)
                    ],
                ])
                input[1] = Channel.of([[id:"GRCh37"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport
                    .contains("Contig names: [chr22] in the BAM: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam are not present in the reference genome. Please set `rename_chr` to `true` to rename the contigs.")
                }
            )
        }
    }

    test("Error : still difference after renaming VCF"){
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                fai_file = Channel.of([
                    "chr", "chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10",
                    "GL000207.1", "GL000226.1", "GL000229.1", "GL000231.1", "GL000210.1", "GL000239.1", "GL000235.1",
                    "GL000201.1", "GL000247.1", "GL000245.1", "GL000197.1", "GL000203.1", "GL000246.1", "GL000249.1",
                    "GL000196.1", "GL000248.1", "GL000244.1", "GL000238.1", "GL000202.1", "GL000234.1", "GL000232.1",
                    "GL000206.1", "GL000240.1", "GL000236.1", "GL000241.1", "GL000243.1", "GL000242.1", "GL000230.1",
                    "GL000237.1", "GL000233.1", "GL000204.1", "GL000198.1", "GL000208.1", "GL000191.1", "GL000227.1",
                    "GL000228.1", "GL000214.1", "GL000221.1", "GL000209.1", "GL000218.1", "GL000220.1", "GL000213.1",
                    "GL000211.1", "GL000199.1", "GL000217.1", "GL000216.1", "GL000215.1", "GL000205.1", "GL000219.1",
                    "GL000224.1", "GL000223.1", "GL000195.1", "GL000212.1", "GL000222.1", "GL000200.1", "GL000193.1",
                    "GL000194.1", "GL000225.1", "GL000192.1", "NC_007605", "hs37d5"
                ]).collectFile(name: 'genome.fai', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "VCF_AllNoChr"],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz",checkIfExist:true),
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz.tbi",checkIfExist:true)
                    ],
                ])
                input[1] = Channel.of([[id:"GRCh37"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport.contains("Contig names: [chr11, chr12, chr13, chr14, chr15, chr16, chr17, chr18, chr19, chr20, chr21, chr22, chrX, chrY, chrMT] in the file: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz are not present in the reference genome and cannot be solved by adding or removing the 'chr' prefix.")}
            )
        }
    }
    */
    test("Error : still difference after renaming BAM"){
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                fai_file = Channel.of([
                    "chr", "chr1"
                ]).collectFile(name: 'genome.fai', newLine: true)
                input[0] = Channel.fromList([
                    [
                        [id: "BAM_chr22"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true)
                    ],
                ])
                input[1] = Channel.of([[id:"GRCh37"],[]])
                    .combine(fai_file)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport.contains("Contig names: [chr22] in the file: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam are not present in the reference genome and cannot be solved by adding or removing the `chr` prefix.")}
            )
        }
    }
}
