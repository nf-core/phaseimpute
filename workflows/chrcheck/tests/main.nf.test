nextflow_workflow {

    name "Test workflow CHRCHECK"
    script "../main.nf"

    workflow "CHRCHECK"

    tag "workflows"
    tag "workflows_local"
    tag "workflows/chrcheck"
    tag "chrcheck"

    tag "bcftools"
    tag "bcftools/annotate"
    tag "bcftools/index"
    tag "gawk"
    tag "samtools"
    tag "samtools/reheader"
    tag "samtools/index"

    test("Rename: VCF BAM chr + fasta no chr") {
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "VCF_chr22"],
                        file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz'],checkIfExist:true),
                        file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz_tbi'],checkIfExist:true),
                        ["22"]
                    ],
                    [
                        [id: "BAM_chr22"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true),
                        ["22"]
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.output.collect{
                    if (it[1].endsWith("vcf.gz")) {
                        path(it[1]).linesGzip.findAll { it.startsWith ("##contig=<ID") }
                    } else {
                        bam(it[1]).getHeader().findAll { it.startsWith ("@SQ") }
                    }
                    }).match("headernochr")
                }
            )
        }
    }

    test("Rename: VCF no chr + fasta chr") {
        config "./nextflow_rename.config"
        setup {
            run("BAM_CHR_RENAME_SAMTOOLS", alias: "PREPROCESS") {
                script "../../../subworkflows/local/bam_chr_rename_samtools/main.nf"
                process {
                    """
                    input[0] = Channel.fromList([
                        [
                            [id: "BAM_22"],
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true),
                            "nochr"
                        ]
                    ])
                    """
                }
            }
        }
        when {
            workflow {
                """
                input[0] = PREPROCESS.out.bam_renamed
                    .mix(
                        Channel.fromList([
                            [
                                [id: "VCF_AllNoChr"],
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz",checkIfExist:true),
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz.tbi",checkIfExist:true),
                            ],
                        ])
                    )
                    .combine(Channel.of(["chr22"]).collect().toList())
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
                { assert snapshot(workflow.out.output.collect{
                    if (it[1].endsWith("vcf.gz")) {
                        path(it[1]).linesGzip.findAll { it.startsWith ("##contig=<ID") }
                    } else {
                        bam(it[1]).getHeader().findAll { it.startsWith ("@SQ") }
                    }
                    }).match("headerwithchr")
                }
            )
        }
    }

    test("Error : missing renaming VCF") {
        config "./nextflow.config"
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "VCF_chr22"],
                        file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz'],checkIfExist:true),
                        file(params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz_tbi'],checkIfExist:true),
                        ["22"]
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport
                    .contains("Contig names: [chr22] in VCF: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz are not present in reference genome with same writing. Please set `rename_chr` to `true` to rename the contigs.")
                }
            )
        }
    }

    test("Error : missing renaming BAM") {
        config "./nextflow.config"
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "BAM_chr22"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true),
                        ["22"]
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport
                    .contains("Contig names: [chr22] in BAM: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam are not present in reference genome with same writing. Please set `rename_chr` to `true` to rename the contigs.")
                }
            )
        }
    }

    test("Error : still difference after renaming VCF"){
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                lst_chr = [
                    "chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr34",
                    "GL000207.1", "GL000226.1", "GL000229.1", "GL000231.1", "GL000210.1", "GL000239.1", "GL000235.1",
                    "GL000201.1", "GL000247.1", "GL000245.1", "GL000197.1", "GL000203.1", "GL000246.1", "GL000249.1",
                    "GL000196.1", "GL000248.1", "GL000244.1", "GL000238.1", "GL000202.1", "GL000234.1", "GL000232.1",
                    "GL000206.1", "GL000240.1", "GL000236.1", "GL000241.1", "GL000243.1", "GL000242.1", "GL000230.1",
                    "GL000237.1", "GL000233.1", "GL000204.1", "GL000198.1", "GL000208.1", "GL000191.1", "GL000227.1",
                    "GL000228.1", "GL000214.1", "GL000221.1", "GL000209.1", "GL000218.1", "GL000220.1", "GL000213.1",
                    "GL000211.1", "GL000199.1", "GL000217.1", "GL000216.1", "GL000215.1", "GL000205.1", "GL000219.1",
                    "GL000224.1", "GL000223.1", "GL000195.1", "GL000212.1", "GL000222.1", "GL000200.1", "GL000193.1",
                    "GL000194.1", "GL000225.1", "GL000192.1", "NC_007605", "hs37d5"
                ]
                input[0] = Channel.fromList([
                    [
                        [id: "VCF_AllNoChr"],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz",checkIfExist:true),
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz.tbi",checkIfExist:true),
                        lst_chr
                    ],
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport.contains("Contig names: [chr34] absent from file: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/vcf/NA24385_sv.vcf.gz and cannot be solved by adding or removing the `chr` prefix.")}
            )
        }
    }

    test("Error : still difference after renaming BAM"){
        config "./nextflow_rename.config"
        when {
            workflow {
                """
                input[0] = Channel.fromList([
                    [
                        [id: "BAM_chr22"],
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExist:true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExist:true),
                        ["chr1"]
                    ],
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.failed },
                { assert workflow.errorReport.contains("Contig names: [chr1] absent from file: /nf-core/test-datasets/modules/data/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam and cannot be solved by adding or removing the `chr` prefix.")}
            )
        }
    }
}
