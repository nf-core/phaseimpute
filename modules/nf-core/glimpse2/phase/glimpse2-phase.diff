Changes in module 'nf-core/glimpse2/phase'
--- modules/nf-core/glimpse2/phase/main.nf
+++ modules/nf-core/glimpse2/phase/main.nf
@@ -1,6 +1,6 @@
 process GLIMPSE2_PHASE {
     tag "$meta.id"
-    label 'process_medium'
+    label 'process_single'
 
     beforeScript  """
     if cat /proc/cpuinfo | grep avx2 -q
@@ -18,11 +18,11 @@
         'biocontainers/glimpse-bio:2.0.0--hf340a29_0' }"
 
     input:
-        tuple val(meta) , path(input), path(input_index), path(samples_file), val(input_region), val(output_region), path(reference), path(reference_index), path(map)
+        tuple val(meta) , path(input, arity: '1..*'), path(input_index), path(samples_file), val(input_region), val(output_region), path(reference), path(reference_index), path(map)
         tuple val(meta2), path(fasta_reference), path(fasta_reference_index)
 
     output:
-        tuple val(meta), path("*.{vcf,bcf,bgen}"), emit: phased_variants
+        tuple val(meta), path("*.{vcf.gz,bcf,bgen}"), emit: phased_variants
         tuple val(meta), path("*.txt.gz")        , emit: stats_coverage, optional: true
         path "versions.yml"                      , emit: versions
 
@@ -41,15 +41,39 @@
     def input_region_cmd      = input_region        ? "--input-region $input_region"  : ""
     def output_region_cmd     = output_region       ? "--output-region $output_region": ""
 
-    def input_bam             = input.any { it.extension in ["cram","bam"]}
+    def input_type            = input.collect{
+        it.toString().endsWithAny("cram", "bam") ? "bam" :
+        it.toString().endsWithAny("vcf", "bcf", "vcf.gz") ? "gl" :
+        it.getExtension()
+        }.unique()
+
+    if (input_type.size() > 1 | !(input_type.contains("gl") | input_type.contains("bam"))) {
+        error "Input files must be of the same type and either .bam/.cram or .vcf/.vcf.gz/.bcf format. Found: ${input_type}"
+    } else {
+        input_type = input_type[0]
+    }
+    if (input_type == "gl" & input.size() > 1) {
+        error "Only one input .vcf/.vcf.gz/.bcf file can be provided"
+    }
+    def input_list = input.size() > 1
 
     """
-    if $input_bam
+    if $input_list ;
     then
         ls -1 | grep '\\.cram\$\\|\\.bam\$' > all_bam.txt
         input_command="--bam-list all_bam.txt"
     else
-        input_command="--input-gl $input"
+        if [ "$input_type" == "bam" ];
+        then
+            input_command="--bam-file $input"
+        elif [ "$input_type" == "gl" ];
+        then
+            input_command="--input-gl $input"
+        else
+            echo "Input file type not recognised"
+            echo "$input_type"
+            exit 1
+        fi
     fi
 
     GLIMPSE2_phase \\

--- modules/nf-core/glimpse2/phase/tests/main.nf.test
+++ modules/nf-core/glimpse2/phase/tests/main.nf.test
@@ -141,4 +141,140 @@
             )
         }
     }
+    test("Should run with list of bam files and reference genome") {
+
+        when {
+            process {
+                """
+                input_bam = Channel.of([
+                    [id:'input'],
+                    [file(params.pipelines_testdata_base_path + "individuals/NA12878/NA12878.s.bam", checkIfExists: true),
+                     file(params.pipelines_testdata_base_path + "individuals/NA19401/NA19401.s.bam", checkIfExists: true)],
+                    [file(params.pipelines_testdata_base_path + "individuals/NA12878/NA12878.s.bam.bai", checkIfExists: true),
+                     file(params.pipelines_testdata_base_path + "individuals/NA19401/NA19401.s.bam.bai", checkIfExists: true)],
+                    [],
+                    "chr21:16600000-16800000",
+                    "chr21:16650000-16750000",
+                ])
+                ref_panel = Channel.of([
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf", checkIfExists: true),
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf.csi", checkIfExists: true)
+                ])
+
+                map_file = Channel.of([
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/chr21.b38.gmap.gz", checkIfExists: true)
+                ])
+                reference_genome = Channel.of([
+                    [id:'refHG38_chr21'],
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz", checkIfExists: true),
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz.fai", checkIfExists: true)
+                    ])
+                // [meta, vcf, index, sample_infos, regionin, regionout,ref, index, map] [meta, fasta, fai]
+                input[0] = input_bam
+                    .combine(ref_panel)
+                    .combine(map_file)
+                input[1] = reference_genome
+                """
+                }
+        }
+
+        then {
+            assertAll(
+                { assert process.success },
+                // File has a timestamp in it and is in binary format, so we can only check the name
+                { assert file(process.out.phased_variants[0][1]).name == "input_chr21_16650000-16750000.bcf" },
+                { assert snapshot(process.out.stats_coverage).match("List_coverage")},
+                { assert snapshot(process.out.versions).match("List")}
+            )
+        }
+    }
+
+    test("Should run into error file type inconsistent") {
+
+        when {
+            process {
+                """
+                input_bam = Channel.of([
+                    [id:'input'],
+                    [file(params.pipelines_testdata_base_path + "individuals/NA12878/NA12878.s.bam", checkIfExists: true),
+                     file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz", checkIfExists: true)],
+                    [file(params.pipelines_testdata_base_path + "individuals/NA12878/NA12878.s.bam.bai", checkIfExists: true),
+                     file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz.csi", checkIfExists: true)],
+                    [],
+                    "chr21:16600000-16800000",
+                    "chr21:16650000-16750000",
+                ])
+                ref_panel = Channel.of([
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf", checkIfExists: true),
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf.csi", checkIfExists: true)
+                ])
+
+                map_file = Channel.of([
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/chr21.b38.gmap.gz", checkIfExists: true)
+                ])
+                reference_genome = Channel.of([
+                    [id:'refHG38_chr21'],
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz", checkIfExists: true),
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz.fai", checkIfExists: true)
+                    ])
+                // [meta, vcf, index, sample_infos, regionin, regionout,ref, index, map] [meta, fasta, fai]
+                input[0] = input_bam
+                    .combine(ref_panel)
+                    .combine(map_file)
+                input[1] = reference_genome
+                """
+                }
+        }
+
+        then {
+            assertAll(
+                { assert process.failed },
+                { assert process.errorReport.contains("Input files must be of the same type and either .bam/.cram or .vcf/.vcf.gz/.bcf format. Found: [bam, gl]") }
+            )
+        }
+    }
+
+    test("Should run into error only one vcf allowed") {
+        when {
+            process {
+                """
+                input_bam = Channel.of([
+                    [id:'input'],
+                    [file(params.pipelines_testdata_base_path + "individuals/NA12878/NA12878.s.1x.bcf", checkIfExists: true),
+                     file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz", checkIfExists: true)],
+                    [file(params.pipelines_testdata_base_path + "individuals/NA12878/NA12878.s.1x.bcf.csi", checkIfExists: true),
+                     file(params.modules_testdata_base_path + "delete_me/glimpse/NA12878.chr21.s.1x.vcf.gz.csi", checkIfExists: true)],
+                    [],
+                    "chr21:16600000-16800000",
+                    "chr21:16650000-16750000",
+                ])
+                ref_panel = Channel.of([
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf", checkIfExists: true),
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/1000GP.chr21.noNA12878.s.bcf.csi", checkIfExists: true)
+                ])
+
+                map_file = Channel.of([
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/chr21.b38.gmap.gz", checkIfExists: true)
+                ])
+                reference_genome = Channel.of([
+                    [id:'refHG38_chr21'],
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz", checkIfExists: true),
+                    file(params.modules_testdata_base_path + "delete_me/glimpse/hs38DH.chr21.fa.gz.fai", checkIfExists: true)
+                    ])
+                // [meta, vcf, index, sample_infos, regionin, regionout,ref, index, map] [meta, fasta, fai]
+                input[0] = input_bam
+                    .combine(ref_panel)
+                    .combine(map_file)
+                input[1] = reference_genome
+                """
+                }
+        }
+
+        then {
+            assertAll(
+                { assert process.failed },
+                { assert process.errorReport.contains("Only one input .vcf/.vcf.gz/.bcf file can be provided") }
+            )
+        }
+    }
 }

--- modules/nf-core/glimpse2/phase/tests/main.nf.test.snap
+++ modules/nf-core/glimpse2/phase/tests/main.nf.test.snap
@@ -22,6 +22,35 @@
             "nextflow": "23.10.1"
         },
         "timestamp": "2024-03-13T16:58:05.013609832"
+    },
+    "List_coverage": {
+        "content": [
+            [
+                [
+                    {
+                        "id": "input"
+                    },
+                    "input_chr21_16650000-16750000_stats_coverage.txt.gz:md5,ac61370fc14738b103e160b7298727b9"
+                ]
+            ]
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-07-05T12:16:38.329675242"
+    },
+    "List": {
+        "content": [
+            [
+                "versions.yml:md5,c68de03046a6503cdbcf3a1495fc512f"
+            ]
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-07-05T12:16:38.363407569"
     },
     "BAM_coverage": {
         "content": [

************************************************************
